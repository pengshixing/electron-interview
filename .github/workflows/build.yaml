name: Electron Build and Release

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '20'
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-release:
    if: contains(github.event.head_commit.message, 'build')
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            build-command: build-win
            artifact-path: 'package/win-unpacked/*.exe'
          - os: macos-latest
            build-command: build-mac
            artifact-path: 'package/mac/*.dmg'
          - os: ubuntu-latest
            build-command: build-linux
            artifact-path: 'package/linux/*.AppImage'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'  # Enable npm caching

      - name: Install dependencies
        run: |
          npm install  # More reliable than npm install for CI environments
        
      - name: Build Electron app
        run: |
          npm run build
          npm run ${{ matrix.build-command }}
        shell: bash

      # Cache build artifacts
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            package/
            dist/
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v-0.0.1")
          # Increment the patch version
          current_version=${latest_tag#v-}  # Remove 'v-' prefix
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="v-$major.$minor.$((patch + 1))"
          echo "new_tag=$new_version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ steps.get_latest_tag.outputs.new_tag }}
          name: Release ${{ steps.get_latest_tag.outputs.new_tag }}
          body: |
            ## What's Changed
            ${{ github.event.head_commit.message }}
            
            ## Build Information
            - OS: ${{ matrix.os }}
            - Node Version: ${{ env.NODE_VERSION }}
            - Commit: ${{ github.sha }}
          artifacts: ${{ matrix.artifact-path }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

      # Optional: Cleanup cache
      - name: Cleanup
        if: always()
        run: |
          npm cache clean --force
          rm -rf node_modules
        shell: bash